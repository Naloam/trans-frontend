{"version":3,"file":"popup-D2pz2-Nc.js","sources":["../../src/popup/Popup.tsx","../../src/popup/index.tsx"],"sourcesContent":["/**\r\n * Popup Component\r\n * 扩展弹窗主组件\r\n */\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\n\r\n// 类型定义\r\ninterface TranslationResult {\r\n  ok: boolean;\r\n  data?: {\r\n    translatedText: string;\r\n    detectedLanguage?: string;\r\n    alternatives?: string[];\r\n  };\r\n  error?: {\r\n    code: string;\r\n    message: string;\r\n  };\r\n}\r\n\r\ninterface LanguageOption {\r\n  code: string;\r\n  name: string;\r\n}\r\n\r\n// 支持的语言列表\r\nconst LANGUAGES: LanguageOption[] = [\r\n  { code: 'auto', name: '自动检测' },\r\n  { code: 'zh', name: '中文' },\r\n  { code: 'en', name: 'English' },\r\n  { code: 'ja', name: '日本語' },\r\n  { code: 'ko', name: '한국어' },\r\n  { code: 'fr', name: 'Français' },\r\n  { code: 'de', name: 'Deutsch' },\r\n  { code: 'es', name: 'Español' },\r\n  { code: 'ru', name: 'Русский' },\r\n  { code: 'ar', name: 'العربية' }\r\n];\r\n\r\nconst Popup: React.FC = () => {\r\n  // 状态管理\r\n  const [inputText, setInputText] = useState('');\r\n  const [translatedText, setTranslatedText] = useState('');\r\n  const [sourceLang, setSourceLang] = useState('auto');\r\n  const [targetLang, setTargetLang] = useState('zh');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [alternatives, setAlternatives] = useState<string[]>([]);\r\n\r\n  // 从存储加载设置\r\n  useEffect(() => {\r\n    chrome.storage.local.get(['defaultSourceLang', 'defaultTargetLang'], (result) => {\r\n      if (result.defaultSourceLang) setSourceLang(result.defaultSourceLang);\r\n      if (result.defaultTargetLang) setTargetLang(result.defaultTargetLang);\r\n    });\r\n  }, []);\r\n\r\n  // 保存语言设置\r\n  const saveLanguageSettings = useCallback(() => {\r\n    chrome.storage.local.set({\r\n      defaultSourceLang: sourceLang,\r\n      defaultTargetLang: targetLang\r\n    });\r\n  }, [sourceLang, targetLang]);\r\n\r\n  // 翻译函数\r\n  const handleTranslate = useCallback(async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setTranslatedText('');\r\n    setAlternatives([]);\r\n\r\n    try {\r\n      const response = await new Promise<TranslationResult>((resolve) => {\r\n        chrome.runtime.sendMessage({\r\n          type: 'translate',\r\n          payload: {\r\n            id: Date.now().toString(),\r\n            text: inputText.trim(),\r\n            source: sourceLang,\r\n            target: targetLang,\r\n            format: 'text'\r\n          }\r\n        }, resolve);\r\n      });\r\n\r\n      if (response.ok && response.data) {\r\n        setTranslatedText(response.data.translatedText);\r\n        setAlternatives(response.data.alternatives || []);\r\n        \r\n        // 保存到翻译历史\r\n        chrome.storage.local.get(['translationHistory'], (result) => {\r\n          const history = result.translationHistory || [];\r\n          history.unshift({\r\n            original: inputText.trim(),\r\n            translated: response.data!.translatedText,\r\n            sourceLang,\r\n            targetLang,\r\n            timestamp: Date.now()\r\n          });\r\n          \r\n          // 只保留最近50条记录\r\n          chrome.storage.local.set({\r\n            translationHistory: history.slice(0, 50)\r\n          });\r\n        });\r\n      } else {\r\n        setError(response.error?.message || '翻译失败');\r\n      }\r\n    } catch (err) {\r\n      setError('网络连接失败');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [inputText, sourceLang, targetLang]);\r\n\r\n  // 交换语言\r\n  const handleSwapLanguages = useCallback(() => {\r\n    if (sourceLang === 'auto') {\r\n      setSourceLang(targetLang);\r\n      setTargetLang('en');\r\n    } else {\r\n      const temp = sourceLang;\r\n      setSourceLang(targetLang);\r\n      setTargetLang(temp);\r\n    }\r\n    saveLanguageSettings();\r\n  }, [sourceLang, targetLang, saveLanguageSettings]);\r\n\r\n  // 复制翻译结果\r\n  const handleCopy = useCallback(() => {\r\n    if (translatedText) {\r\n      navigator.clipboard.writeText(translatedText);\r\n    }\r\n  }, [translatedText]);\r\n\r\n  // 清空输入\r\n  const handleClear = useCallback(() => {\r\n    setInputText('');\r\n    setTranslatedText('');\r\n    setError(null);\r\n    setAlternatives([]);\r\n  }, []);\r\n\r\n  // 打开设置页面\r\n  const handleOpenSettings = useCallback(() => {\r\n    chrome.runtime.openOptionsPage();\r\n  }, []);\r\n\r\n  // 键盘快捷键\r\n  const handleKeyDown = useCallback((event: React.KeyboardEvent) => {\r\n    if (event.ctrlKey && event.key === 'Enter') {\r\n      event.preventDefault();\r\n      handleTranslate();\r\n    }\r\n  }, [handleTranslate]);\r\n\r\n  // 语言变化处理\r\n  useEffect(() => {\r\n    saveLanguageSettings();\r\n  }, [saveLanguageSettings]);\r\n\r\n  return (\r\n    <div className=\"w-96 min-h-[500px] bg-white\">\r\n      {/* 头部 */}\r\n      <header className=\"bg-blue-600 text-white p-4 flex items-center justify-between\">\r\n        <h1 className=\"text-lg font-semibold\">沉浸式翻译</h1>\r\n        <button\r\n          onClick={handleOpenSettings}\r\n          className=\"p-2 hover:bg-blue-700 rounded transition-colors\"\r\n          title=\"打开设置页面\"\r\n          aria-label=\"打开设置页面\"\r\n          type=\"button\"\r\n        >\r\n          ⚙️\r\n        </button>\r\n      </header>\r\n\r\n      {/* 主内容 */}\r\n      <main className=\"p-4 space-y-4\">\r\n        {/* 语言选择 */}\r\n        <div className=\"flex items-center space-x-2\">\r\n          <select\r\n            value={sourceLang}\r\n            onChange={(e) => setSourceLang(e.target.value)}\r\n            className=\"flex-1 p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n            aria-label=\"源语言\"\r\n          >\r\n            {LANGUAGES.map(lang => (\r\n              <option key={lang.code} value={lang.code}>\r\n                {lang.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          \r\n          <button\r\n            onClick={handleSwapLanguages}\r\n            className=\"p-2 text-gray-600 hover:text-blue-600 transition-colors\"\r\n            title=\"交换语言\"\r\n            type=\"button\"\r\n          >\r\n            ⇄\r\n          </button>\r\n          \r\n          <select\r\n            value={targetLang}\r\n            onChange={(e) => setTargetLang(e.target.value)}\r\n            className=\"flex-1 p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n            aria-label=\"目标语言\"\r\n          >\r\n            {LANGUAGES.filter(lang => lang.code !== 'auto').map(lang => (\r\n              <option key={lang.code} value={lang.code}>\r\n                {lang.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {/* 输入区域 */}\r\n        <div className=\"relative\">\r\n          <textarea\r\n            value={inputText}\r\n            onChange={(e) => setInputText(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n            placeholder=\"输入要翻译的文本...\"\r\n            className=\"w-full h-32 p-3 border border-gray-300 rounded resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n            maxLength={1000}\r\n          />\r\n          <div className=\"absolute bottom-2 right-2 flex items-center space-x-2\">\r\n            <span className=\"text-xs text-gray-500\">\r\n              {inputText.length}/1000\r\n            </span>\r\n            {inputText && (\r\n              <button\r\n                onClick={handleClear}\r\n                className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n                title=\"清空输入\"\r\n                type=\"button\"\r\n              >\r\n                ✕\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 翻译按钮 */}\r\n        <button\r\n          onClick={handleTranslate}\r\n          disabled={!inputText.trim() || isLoading}\r\n          className=\"w-full py-3 bg-blue-600 text-white rounded font-medium hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors\"\r\n          type=\"button\"\r\n        >\r\n          {isLoading ? '翻译中...' : '翻译'}\r\n        </button>\r\n\r\n        {/* 错误信息 */}\r\n        {error && (\r\n          <div className=\"p-3 bg-red-50 border border-red-200 rounded text-red-700\">\r\n            ❌ {error}\r\n          </div>\r\n        )}\r\n\r\n        {/* 翻译结果 */}\r\n        {translatedText && (\r\n          <div className=\"space-y-3\">\r\n            <div className=\"relative p-3 bg-gray-50 border border-gray-200 rounded\">\r\n              <div className=\"text-gray-800 leading-relaxed\">\r\n                {translatedText}\r\n              </div>\r\n              <button\r\n                onClick={handleCopy}\r\n                className=\"absolute top-2 right-2 p-1 text-gray-400 hover:text-gray-600 transition-colors\"\r\n                title=\"复制翻译结果\"\r\n                type=\"button\"\r\n              >\r\n                📋\r\n              </button>\r\n            </div>\r\n\r\n            {/* 候选翻译 */}\r\n            {alternatives.length > 0 && (\r\n              <div className=\"space-y-2\">\r\n                <h4 className=\"text-sm font-medium text-gray-700\">其他翻译:</h4>\r\n                {alternatives.map((alt, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className=\"p-2 bg-white border border-gray-200 rounded text-sm text-gray-600 cursor-pointer hover:bg-gray-50 transition-colors\"\r\n                    onClick={() => setTranslatedText(alt)}\r\n                  >\r\n                    {alt}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </main>\r\n\r\n      {/* 底部提示 */}\r\n      <footer className=\"p-4 border-t border-gray-200 text-xs text-gray-500 text-center\">\r\n        快捷键: Ctrl+Enter 翻译\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;","/**\r\n * Popup Entry Point\r\n * React 应用入口文件\r\n */\r\n\r\nimport React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport Popup from './Popup';\r\nimport '../styles/tailwind.css'; // Tailwind CSS 样式\r\n\r\n// 创建 React 根节点并渲染应用\r\nconst container = document.getElementById('popup-root');\r\nif (container) {\r\n  const root = createRoot(container);\r\n  root.render(<Popup />);\r\n} else {\r\n  console.error('Popup root element not found');\r\n}"],"names":["useState","useEffect","useCallback","jsxs","jsx"],"mappings":"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"}