{"version":3,"file":"serviceWorker.js","sources":["../../../src/worker/serviceWorker.ts"],"sourcesContent":["/**\n * Chrome Extension Service Worker (Manifest V3)\n * 处理翻译请求、缓存管理、配置存储等后台任务\n * \n * 调试方法：\n * 1. 打开 Chrome -> 扩展程序 -> Immersive Translate -> 详细信息\n * 2. 点击 \"检查视图\" 下的 \"Service Worker\" 链接\n * 3. 在 DevTools Console 中查看日志和调试\n */\n\n// 消息类型定义\ninterface TranslateRequest {\n  id: string;\n  text: string;\n  source: string;\n  target: string;\n  format?: 'text' | 'html';\n}\n\n\ninterface TranslateResponse {\n  ok: boolean;\n  data?: {\n    translatedText: string;\n    detectedLanguage?: string;\n    alternatives?: string[];\n  };\n  error?: {\n    code: string;\n    message: string;\n  };\n}\n\n// 后端API请求格式\ninterface BackendTranslateRequest {\n  target: string;\n  segments: Array<{\n    id: string;\n    text: string;\n    model?: string;\n  }>;\n  extra_args?: {\n    style?: string;\n    identity?: string;\n  };\n}\n\n// 后端API响应格式\ninterface BackendTranslateResponse {\n  translated: string;\n  segments: Array<{\n    id: string;\n    text: string;\n  }>;\n}\n\ninterface MessageRequest {\n  type: 'translate' | 'languages' | 'detect' | 'clearCache' | 'translateImage' | 'translateDocument';\n  payload: any;\n}\n\ninterface MessageResponse {\n  ok: boolean;\n  data?: any;\n  error?: {\n    code: string;\n    message: string;\n  };\n}\n\n// 配置接口\ninterface ExtensionConfig {\n  reduceMotion: boolean;\n  immersiveModeEnabled: boolean;\n  autoClipboard: boolean;\n  cacheTTL: number;\n}\n\n// 默认配置\nconst DEFAULT_CONFIG: ExtensionConfig = {\n  reduceMotion: false,\n  immersiveModeEnabled: true,\n  autoClipboard: false,\n  cacheTTL: 3600 // 1小时\n};\n\n// IndexedDB 缓存助手\nclass TranslationCache {\n  private dbName = 'immersive-translate';\n  private version = 1;\n  private storeName = 'translations';\n  private db: IDBDatabase | null = null;\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          const store = db.createObjectStore(this.storeName, { keyPath: 'hash' });\n          store.createIndex('expireAt', 'expireAt', { unique: false });\n        }\n      };\n    });\n  }\n\n  async get(hash: string): Promise<any> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.get(hash);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const result = request.result;\n        if (result && result.expireAt > Date.now()) {\n          resolve(result.data);\n        } else {\n          resolve(null);\n        }\n      };\n    });\n  }\n\n  async set(hash: string, data: any, ttlSeconds: number = 3600): Promise<void> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const expireAt = Date.now() + (ttlSeconds * 1000);\n\n      const request = store.put({ hash, data, expireAt });\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async clearExpired(): Promise<void> {\n    if (!this.db) await this.init();\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const index = store.index('expireAt');\n      const range = IDBKeyRange.upperBound(Date.now());\n\n      const request = index.openCursor(range);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = (event) => {\n        const cursor = (event.target as IDBRequest).result;\n        if (cursor) {\n          cursor.delete();\n          cursor.continue();\n        } else {\n          resolve();\n        }\n      };\n    });\n  }\n}\n\n// 全局实例\nconst cache = new TranslationCache();\n\n// 生成缓存键\nasync function generateHash(text: string, source: string, target: string, format: string = 'text'): Promise<string> {\n  const data = `${text}|${source}|${target}|${format}`;\n  const encoder = new TextEncoder();\n  const hashBuffer = await crypto.subtle.digest('SHA-256', encoder.encode(data));\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\n// 翻译API请求（带重试）\nasync function fetchTranslation(request: TranslateRequest, retries: number = 2): Promise<TranslateResponse> {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), 8000); // 8秒超时\n\n  try {\n    // 构造后端API请求格式\n    const backendRequest: BackendTranslateRequest = {\n      target: request.target,\n      segments: [\n        {\n          id: request.id,\n          text: request.text,\n          model: \"qwen-turbo-latest\" // 默认使用qwen-turbo-latest模型\n        }\n      ],\n      // extra_args 可以根据需要添加\n    };\n\n    const backendUrl = import.meta.env.BACKEND_URL || 'http://localhost:8000';\n\n    const response = await fetch(`${backendUrl}/translate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(backendRequest),\n      signal: controller.signal\n    });\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    // 处理后端响应格式\n    const backendResponse: BackendTranslateResponse = await response.json();\n\n    // 转换为前端期望的格式\n    const translatedSegment = backendResponse.segments.find(segment => segment.id === request.id);\n\n    if (!translatedSegment) {\n      throw new Error('无法找到对应的翻译结果');\n    }\n\n    return {\n      ok: true,\n      data: {\n        translatedText: translatedSegment.text,\n        detectedLanguage: backendResponse.translated,\n        alternatives: []\n      }\n    };\n\n  } catch (error: any) {\n    clearTimeout(timeoutId);\n\n    if (retries > 0 && error.name !== 'AbortError') {\n      console.log(`Translation request failed, retrying... (${retries} attempts left)`);\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 等待1秒后重试\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 等待1秒后重试\n      return fetchTranslation(request, retries - 1);\n    }\n\n    return {\n      ok: false,\n      error: {\n        code: error.name === 'AbortError' ? 'TIMEOUT' : 'NETWORK_ERROR',\n        message: error.message || 'Translation request failed'\n      }\n    };\n  }\n}\n\n// 图片翻译函数 stub\nasync function translateImage(_fileData: ArrayBuffer, fileName: string, fileType: string): Promise<TranslateResponse> {\n  try {\n    // 这里应该实现实际的图片翻译逻辑\n    // 例如：使用OCR识别图片中的文本，然后翻译识别出的文本\n\n    console.log('Translating image:', fileName, fileType);\n\n    // 模拟处理过程\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // 模拟返回结果\n    return {\n      ok: true,\n      data: {\n        translatedText: `这是从图片 \"${fileName}\" 中识别并翻译的文本内容。\\n\\nOCR识别和翻译功能需要连接到后端服务来实现。`,\n        detectedLanguage: 'en',\n        alternatives: []\n      }\n    };\n  } catch (error: any) {\n    return {\n      ok: false,\n      error: {\n        code: 'IMAGE_TRANSLATION_ERROR',\n        message: error.message || '图片翻译失败'\n      }\n    };\n  }\n}\n\n// 文档翻译函数 stub\nasync function translateDocument(_fileData: ArrayBuffer, fileName: string, fileType: string): Promise<TranslateResponse> {\n  try {\n    // 这里应该实现实际的文档翻译逻辑\n    // 例如：解析PDF/TXT/Docx文件，提取文本内容，然后翻译\n\n    console.log('Translating document:', fileName, fileType);\n\n    // 模拟处理过程\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // 模拟返回结果\n    return {\n      ok: true,\n      data: {\n        translatedText: `这是从文档 \"${fileName}\" 中提取并翻译的文本内容。\\n\\n文档解析和翻译功能需要连接到后端服务来实现。`,\n        detectedLanguage: 'en',\n        alternatives: []\n      }\n    };\n  } catch (error: any) {\n    return {\n      ok: false,\n      error: {\n        code: 'DOCUMENT_TRANSLATION_ERROR',\n        message: error.message || '文档翻译失败'\n      }\n    };\n  }\n}\n\n// 处理翻译请求\nasync function handleTranslateRequest(request: TranslateRequest): Promise<TranslateResponse> {\n  try {\n    // 生成缓存键\n    const hash = await generateHash(request.text, request.source, request.target, request.format);\n\n    // 检查缓存\n    const cached = await cache.get(hash);\n    if (cached) {\n      console.log('Translation cache hit:', hash);\n      return { ok: true, data: cached };\n    }\n\n    // 发起翻译请求\n    console.log('Translation cache miss, fetching from API:', hash);\n    const result = await fetchTranslation(request);\n\n    // 缓存成功的结果\n    if (result.ok && result.data) {\n      const config = await getConfig();\n      await cache.set(hash, result.data, config.cacheTTL);\n    }\n\n    return result;\n\n  } catch (error: any) {\n    console.error('Translation handler error:', error);\n    return {\n      ok: false,\n      error: {\n        code: 'HANDLER_ERROR',\n        message: error.message || 'Internal translation error'\n      }\n    };\n  }\n}\n\n// 获取配置\nasync function getConfig(): Promise<ExtensionConfig> {\n  return new Promise((resolve) => {\n    chrome.storage.local.get(DEFAULT_CONFIG, (result) => {\n      resolve(result as ExtensionConfig);\n    });\n  });\n}\n\n// 保存配置\n\n// 消息处理器\nasync function handleMessage(\n  message: MessageRequest,\n  sender: chrome.runtime.MessageSender,\n  sendResponse: (response: MessageResponse) => void\n): Promise<void> {\n  console.log('Service worker received message:', message.type, sender.tab?.id);\n\n  try {\n    switch (message.type) {\n      case 'translate':\n        const translateResult = await handleTranslateRequest(message.payload);\n        sendResponse(translateResult);\n        break;\n\n      case 'translateImage':\n        const imageTranslateResult = await translateImage(\n          message.payload.file,\n          message.payload.fileName,\n          message.payload.fileType\n        );\n        sendResponse(imageTranslateResult);\n        break;\n\n      case 'translateDocument':\n        const documentTranslateResult = await translateDocument(\n          message.payload.file,\n          message.payload.fileName,\n          message.payload.fileType\n        );\n        sendResponse(documentTranslateResult);\n        break;\n\n      case 'languages':\n        // 返回支持的语言列表（模拟数据）\n        sendResponse({\n          ok: true,\n          data: {\n            languages: [\n              { code: 'en', name: 'English' },\n              { code: 'zh', name: '中文' },\n              { code: 'ja', name: '日本語' },\n              { code: 'ko', name: '한국어' },\n              { code: 'fr', name: 'Français' },\n              { code: 'de', name: 'Deutsch' },\n              { code: 'es', name: 'Español' }\n            ]\n          }\n        });\n        break;\n\n      case 'detect':\n        // 语言检测（模拟数据）\n        sendResponse({\n          ok: true,\n          data: {\n            detected: 'en'\n          }\n        });\n        break;\n\n      case 'clearCache':\n        await cache.clearExpired();\n        sendResponse({\n          ok: true,\n          data: { message: 'Cache cleared' }\n        });\n        break;\n\n      case 'ping':\n        // 简单的ping消息，用于检查扩展状态\n        sendResponse({\n          ok: true,\n          data: { message: 'pong' }\n        });\n        break;\n\n      default:\n        sendResponse({\n          ok: false,\n          error: {\n            code: 'UNKNOWN_MESSAGE_TYPE',\n            message: `Unknown message type: ${message.type}`\n          }\n        });\n    }\n  } catch (error: any) {\n    console.error('Message handler error:', error);\n    sendResponse({\n      ok: false,\n      error: {\n        code: 'MESSAGE_HANDLER_ERROR',\n        message: error.message || 'Internal message handler error'\n      }\n    });\n  }\n}\n\n// 清理并重新创建context menus\nasync function setupContextMenus() {\n  try {\n    // 先清理所有现有的context menus\n    await chrome.contextMenus.removeAll();\n    console.log('Existing context menus removed');\n  } catch (error) {\n    console.log('No existing context menus to remove or error:', error);\n  }\n  \n  // 创建新的context menus\n  try {\n    chrome.contextMenus.create({\n      id: 'translateImage',\n      title: '翻译选中图片',\n      contexts: ['image'],\n      documentUrlPatterns: ['<all_urls>']\n    });\n\n    chrome.contextMenus.create({\n      id: 'translateDocument',\n      title: '翻译文件',\n      contexts: ['link'],\n      documentUrlPatterns: ['<all_urls>'],\n      targetUrlPatterns: ['*://*/*.pdf', '*://*/*.txt', '*://*/*.docx', '*://*/*.doc']\n    });\n    \n    console.log('Context menus created successfully');\n  } catch (error) {\n    console.error('Failed to create context menus:', error);\n  }\n}\n\n// 创建上下文菜单\nchrome.runtime.onInstalled.addListener(() => {\n  setupContextMenus();\n});\n\n// 监听上下文菜单点击事件\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n  console.log('Context menu clicked on tab:', tab?.id);\n  if (info.menuItemId === 'translateImage' && info.srcUrl) {\n    // 处理图片翻译\n    console.log('Translate image clicked:', info.srcUrl);\n    // 这里应该实现下载图片并翻译的逻辑\n  } else if (info.menuItemId === 'translateDocument' && info.linkUrl) {\n    // 处理文档翻译\n    console.log('Translate document clicked:', info.linkUrl);\n    // 这里应该实现下载文档并翻译的逻辑\n  }\n});\n\n// 事件监听器\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  handleMessage(message, sender, sendResponse);\n  return true; // 保持消息通道开放以支持异步响应\n});\n\n// 安装和更新事件\nchrome.runtime.onInstalled.addListener((details) => {\n  console.log('Extension installed or updated:', details.reason);\n\n  // 初始化缓存\n  cache.init().catch(error => {\n    console.error('Failed to initialize cache:', error);\n  });\n});\n\n// ServiceWorker生命周期事件处理\nself.addEventListener('install', (event: ExtendableEvent) => {\n  console.log('Service Worker installing...');\n  // 立即激活新的service worker\n  event.waitUntil(self.skipWaiting());\n});\n\nself.addEventListener('activate', (event: ExtendableEvent) => {\n  console.log('Service Worker activating...');\n  // 立即接管所有页面\n  event.waitUntil(\n    Promise.all([\n      self.clients.claim(),\n      // 清理旧的缓存\n      caches.keys().then(cacheNames => {\n        return Promise.all(\n          cacheNames.map(cacheName => {\n            if (cacheName !== 'immersive-translate-v1') {\n              console.log('Deleting old cache:', cacheName);\n              return caches.delete(cacheName);\n            }\n          })\n        );\n      })\n    ])\n  );\n});\n\n// 处理ServiceWorker错误\nself.addEventListener('error', (event: ErrorEvent) => {\n  console.error('Service Worker error:', event.error);\n});\n\nself.addEventListener('unhandledrejection', (event: PromiseRejectionEvent) => {\n  console.error('Service Worker unhandled rejection:', event.reason);\n});\n\nconsole.log('Service Worker loaded');"],"names":[],"mappings":";;;AA+EA,MAAM,iBAAkC;AAAA,EACtC,cAAc;AAAA,EACd,sBAAsB;AAAA,EACtB,eAAe;AAAA,EACf,UAAU;AAAA;AACZ;AAGA,MAAM,iBAAiB;AAAA,EAAvB;AACU,kCAAS;AACT,mCAAU;AACV,qCAAY;AACZ,8BAAyB;AAAA;AAAA,EAEjC,MAAM,OAAsB;AAC1B,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,UAAU,UAAU,KAAK,KAAK,QAAQ,KAAK,OAAO;AAExD,cAAQ,UAAU,MAAM,OAAO,QAAQ,KAAK;AAC5C,cAAQ,YAAY,MAAM;AACxB,aAAK,KAAK,QAAQ;AAClB,gBAAA;AAAA,MACF;AAEA,cAAQ,kBAAkB,CAAC,UAAU;AACnC,cAAM,KAAM,MAAM,OAA4B;AAC9C,YAAI,CAAC,GAAG,iBAAiB,SAAS,KAAK,SAAS,GAAG;AACjD,gBAAM,QAAQ,GAAG,kBAAkB,KAAK,WAAW,EAAE,SAAS,QAAQ;AACtE,gBAAM,YAAY,YAAY,YAAY,EAAE,QAAQ,OAAO;AAAA,QAC7D;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,IAAI,MAA4B;AACpC,QAAI,CAAC,KAAK,GAAI,OAAM,KAAK,KAAA;AAEzB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,cAAc,KAAK,GAAI,YAAY,CAAC,KAAK,SAAS,GAAG,UAAU;AACrE,YAAM,QAAQ,YAAY,YAAY,KAAK,SAAS;AACpD,YAAM,UAAU,MAAM,IAAI,IAAI;AAE9B,cAAQ,UAAU,MAAM,OAAO,QAAQ,KAAK;AAC5C,cAAQ,YAAY,MAAM;AACxB,cAAM,SAAS,QAAQ;AACvB,YAAI,UAAU,OAAO,WAAW,KAAK,OAAO;AAC1C,kBAAQ,OAAO,IAAI;AAAA,QACrB,OAAO;AACL,kBAAQ,IAAI;AAAA,QACd;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,IAAI,MAAc,MAAW,aAAqB,MAAqB;AAC3E,QAAI,CAAC,KAAK,GAAI,OAAM,KAAK,KAAA;AAEzB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,cAAc,KAAK,GAAI,YAAY,CAAC,KAAK,SAAS,GAAG,WAAW;AACtE,YAAM,QAAQ,YAAY,YAAY,KAAK,SAAS;AACpD,YAAM,WAAW,KAAK,IAAA,IAAS,aAAa;AAE5C,YAAM,UAAU,MAAM,IAAI,EAAE,MAAM,MAAM,UAAU;AAClD,cAAQ,UAAU,MAAM,OAAO,QAAQ,KAAK;AAC5C,cAAQ,YAAY,MAAM,QAAA;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,eAA8B;AAClC,QAAI,CAAC,KAAK,GAAI,OAAM,KAAK,KAAA;AAEzB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,cAAc,KAAK,GAAI,YAAY,CAAC,KAAK,SAAS,GAAG,WAAW;AACtE,YAAM,QAAQ,YAAY,YAAY,KAAK,SAAS;AACpD,YAAM,QAAQ,MAAM,MAAM,UAAU;AACpC,YAAM,QAAQ,YAAY,WAAW,KAAK,KAAK;AAE/C,YAAM,UAAU,MAAM,WAAW,KAAK;AACtC,cAAQ,UAAU,MAAM,OAAO,QAAQ,KAAK;AAC5C,cAAQ,YAAY,CAAC,UAAU;AAC7B,cAAM,SAAU,MAAM,OAAsB;AAC5C,YAAI,QAAQ;AACV,iBAAO,OAAA;AACP,iBAAO,SAAA;AAAA,QACT,OAAO;AACL,kBAAA;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAGA,MAAM,QAAQ,IAAI,iBAAA;AAGlB,eAAe,aAAa,MAAc,QAAgB,QAAgB,SAAiB,QAAyB;AAClH,QAAM,OAAO,GAAG,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM;AAClD,QAAM,UAAU,IAAI,YAAA;AACpB,QAAM,aAAa,MAAM,OAAO,OAAO,OAAO,WAAW,QAAQ,OAAO,IAAI,CAAC;AAC7E,QAAM,YAAY,MAAM,KAAK,IAAI,WAAW,UAAU,CAAC;AACvD,SAAO,UAAU,IAAI,CAAA,MAAK,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EAAE,KAAK,EAAE;AACpE;AAGA,eAAe,iBAAiB,SAA2B,UAAkB,GAA+B;AAC1G,QAAM,aAAa,IAAI,gBAAA;AACvB,QAAM,YAAY,WAAW,MAAM,WAAW,MAAA,GAAS,GAAI;AAE3D,MAAI;AAEF,UAAM,iBAA0C;AAAA,MAC9C,QAAQ,QAAQ;AAAA,MAChB,UAAU;AAAA,QACR;AAAA,UACE,IAAI,QAAQ;AAAA,UACZ,MAAM,QAAQ;AAAA,UACd,OAAO;AAAA;AAAA,QAAA;AAAA,MACT;AAAA;AAAA,IACF;AAIF,UAAM,aAA4C;AAElD,UAAM,WAAW,MAAM,MAAM,GAAG,UAAU,cAAc;AAAA,MACtD,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,MAAA;AAAA,MAElB,MAAM,KAAK,UAAU,cAAc;AAAA,MACnC,QAAQ,WAAW;AAAA,IAAA,CACpB;AAED,iBAAa,SAAS;AAEtB,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,QAAQ,SAAS,MAAM,KAAK,SAAS,UAAU,EAAE;AAAA,IACnE;AAGA,UAAM,kBAA4C,MAAM,SAAS,KAAA;AAGjE,UAAM,oBAAoB,gBAAgB,SAAS,KAAK,aAAW,QAAQ,OAAO,QAAQ,EAAE;AAE5F,QAAI,CAAC,mBAAmB;AACtB,YAAM,IAAI,MAAM,aAAa;AAAA,IAC/B;AAEA,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,MAAM;AAAA,QACJ,gBAAgB,kBAAkB;AAAA,QAClC,kBAAkB,gBAAgB;AAAA,QAClC,cAAc,CAAA;AAAA,MAAC;AAAA,IACjB;AAAA,EAGJ,SAAS,OAAY;AACnB,iBAAa,SAAS;AAEtB,QAAI,UAAU,KAAK,MAAM,SAAS,cAAc;AAC9C,cAAQ,IAAI,4CAA4C,OAAO,iBAAiB;AAChF,YAAM,IAAI,QAAQ,CAAA,YAAW,WAAW,SAAS,GAAI,CAAC;AACtD,YAAM,IAAI,QAAQ,CAAA,YAAW,WAAW,SAAS,GAAI,CAAC;AACtD,aAAO,iBAAiB,SAAS,UAAU,CAAC;AAAA,IAC9C;AAEA,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,OAAO;AAAA,QACL,MAAM,MAAM,SAAS,eAAe,YAAY;AAAA,QAChD,SAAS,MAAM,WAAW;AAAA,MAAA;AAAA,IAC5B;AAAA,EAEJ;AACF;AAGA,eAAe,eAAe,WAAwB,UAAkB,UAA8C;AACpH,MAAI;AAIF,YAAQ,IAAI,sBAAsB,UAAU,QAAQ;AAGpD,UAAM,IAAI,QAAQ,CAAA,YAAW,WAAW,SAAS,GAAI,CAAC;AAGtD,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,MAAM;AAAA,QACJ,gBAAgB,UAAU,QAAQ;AAAA;AAAA;AAAA,QAClC,kBAAkB;AAAA,QAClB,cAAc,CAAA;AAAA,MAAC;AAAA,IACjB;AAAA,EAEJ,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,OAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS,MAAM,WAAW;AAAA,MAAA;AAAA,IAC5B;AAAA,EAEJ;AACF;AAGA,eAAe,kBAAkB,WAAwB,UAAkB,UAA8C;AACvH,MAAI;AAIF,YAAQ,IAAI,yBAAyB,UAAU,QAAQ;AAGvD,UAAM,IAAI,QAAQ,CAAA,YAAW,WAAW,SAAS,GAAI,CAAC;AAGtD,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,MAAM;AAAA,QACJ,gBAAgB,UAAU,QAAQ;AAAA;AAAA;AAAA,QAClC,kBAAkB;AAAA,QAClB,cAAc,CAAA;AAAA,MAAC;AAAA,IACjB;AAAA,EAEJ,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,OAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS,MAAM,WAAW;AAAA,MAAA;AAAA,IAC5B;AAAA,EAEJ;AACF;AAGA,eAAe,uBAAuB,SAAuD;AAC3F,MAAI;AAEF,UAAM,OAAO,MAAM,aAAa,QAAQ,MAAM,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,MAAM;AAG5F,UAAM,SAAS,MAAM,MAAM,IAAI,IAAI;AACnC,QAAI,QAAQ;AACV,cAAQ,IAAI,0BAA0B,IAAI;AAC1C,aAAO,EAAE,IAAI,MAAM,MAAM,OAAA;AAAA,IAC3B;AAGA,YAAQ,IAAI,8CAA8C,IAAI;AAC9D,UAAM,SAAS,MAAM,iBAAiB,OAAO;AAG7C,QAAI,OAAO,MAAM,OAAO,MAAM;AAC5B,YAAM,SAAS,MAAM,UAAA;AACrB,YAAM,MAAM,IAAI,MAAM,OAAO,MAAM,OAAO,QAAQ;AAAA,IACpD;AAEA,WAAO;AAAA,EAET,SAAS,OAAY;AACnB,YAAQ,MAAM,8BAA8B,KAAK;AACjD,WAAO;AAAA,MACL,IAAI;AAAA,MACJ,OAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS,MAAM,WAAW;AAAA,MAAA;AAAA,IAC5B;AAAA,EAEJ;AACF;AAGA,eAAe,YAAsC;AACnD,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,WAAO,QAAQ,MAAM,IAAI,gBAAgB,CAAC,WAAW;AACnD,cAAQ,MAAyB;AAAA,IACnC,CAAC;AAAA,EACH,CAAC;AACH;AAKA,eAAe,cACb,SACA,QACA,cACe;AACf,UAAQ,IAAI,oCAAoC,QAAQ,MAAM,OAAO,KAAK,EAAE;AAE5E,MAAI;AACF,YAAQ,QAAQ,MAAA;AAAA,MACd,KAAK;AACH,cAAM,kBAAkB,MAAM,uBAAuB,QAAQ,OAAO;AACpE,qBAAa,eAAe;AAC5B;AAAA,MAEF,KAAK;AACH,cAAM,uBAAuB,MAAM;AAAA,UACjC,QAAQ,QAAQ;AAAA,UAChB,QAAQ,QAAQ;AAAA,UAChB,QAAQ,QAAQ;AAAA,QAAA;AAElB,qBAAa,oBAAoB;AACjC;AAAA,MAEF,KAAK;AACH,cAAM,0BAA0B,MAAM;AAAA,UACpC,QAAQ,QAAQ;AAAA,UAChB,QAAQ,QAAQ;AAAA,UAChB,QAAQ,QAAQ;AAAA,QAAA;AAElB,qBAAa,uBAAuB;AACpC;AAAA,MAEF,KAAK;AAEH,qBAAa;AAAA,UACX,IAAI;AAAA,UACJ,MAAM;AAAA,YACJ,WAAW;AAAA,cACT,EAAE,MAAM,MAAM,MAAM,UAAA;AAAA,cACpB,EAAE,MAAM,MAAM,MAAM,KAAA;AAAA,cACpB,EAAE,MAAM,MAAM,MAAM,MAAA;AAAA,cACpB,EAAE,MAAM,MAAM,MAAM,MAAA;AAAA,cACpB,EAAE,MAAM,MAAM,MAAM,WAAA;AAAA,cACpB,EAAE,MAAM,MAAM,MAAM,UAAA;AAAA,cACpB,EAAE,MAAM,MAAM,MAAM,UAAA;AAAA,YAAU;AAAA,UAChC;AAAA,QACF,CACD;AACD;AAAA,MAEF,KAAK;AAEH,qBAAa;AAAA,UACX,IAAI;AAAA,UACJ,MAAM;AAAA,YACJ,UAAU;AAAA,UAAA;AAAA,QACZ,CACD;AACD;AAAA,MAEF,KAAK;AACH,cAAM,MAAM,aAAA;AACZ,qBAAa;AAAA,UACX,IAAI;AAAA,UACJ,MAAM,EAAE,SAAS,gBAAA;AAAA,QAAgB,CAClC;AACD;AAAA,MAEF,KAAK;AAEH,qBAAa;AAAA,UACX,IAAI;AAAA,UACJ,MAAM,EAAE,SAAS,OAAA;AAAA,QAAO,CACzB;AACD;AAAA,MAEF;AACE,qBAAa;AAAA,UACX,IAAI;AAAA,UACJ,OAAO;AAAA,YACL,MAAM;AAAA,YACN,SAAS,yBAAyB,QAAQ,IAAI;AAAA,UAAA;AAAA,QAChD,CACD;AAAA,IAAA;AAAA,EAEP,SAAS,OAAY;AACnB,YAAQ,MAAM,0BAA0B,KAAK;AAC7C,iBAAa;AAAA,MACX,IAAI;AAAA,MACJ,OAAO;AAAA,QACL,MAAM;AAAA,QACN,SAAS,MAAM,WAAW;AAAA,MAAA;AAAA,IAC5B,CACD;AAAA,EACH;AACF;AAGA,eAAe,oBAAoB;AACjC,MAAI;AAEF,UAAM,OAAO,aAAa,UAAA;AAC1B,YAAQ,IAAI,gCAAgC;AAAA,EAC9C,SAAS,OAAO;AACd,YAAQ,IAAI,iDAAiD,KAAK;AAAA,EACpE;AAGA,MAAI;AACF,WAAO,aAAa,OAAO;AAAA,MACzB,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,UAAU,CAAC,OAAO;AAAA,MAClB,qBAAqB,CAAC,YAAY;AAAA,IAAA,CACnC;AAED,WAAO,aAAa,OAAO;AAAA,MACzB,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,UAAU,CAAC,MAAM;AAAA,MACjB,qBAAqB,CAAC,YAAY;AAAA,MAClC,mBAAmB,CAAC,eAAe,eAAe,gBAAgB,aAAa;AAAA,IAAA,CAChF;AAED,YAAQ,IAAI,oCAAoC;AAAA,EAClD,SAAS,OAAO;AACd,YAAQ,MAAM,mCAAmC,KAAK;AAAA,EACxD;AACF;AAGA,OAAO,QAAQ,YAAY,YAAY,MAAM;AAC3C,oBAAA;AACF,CAAC;AAGD,OAAO,aAAa,UAAU,YAAY,CAAC,MAAM,QAAQ;AACvD,UAAQ,IAAI,gCAAgC,KAAK,EAAE;AACnD,MAAI,KAAK,eAAe,oBAAoB,KAAK,QAAQ;AAEvD,YAAQ,IAAI,4BAA4B,KAAK,MAAM;AAAA,EAErD,WAAW,KAAK,eAAe,uBAAuB,KAAK,SAAS;AAElE,YAAQ,IAAI,+BAA+B,KAAK,OAAO;AAAA,EAEzD;AACF,CAAC;AAGD,OAAO,QAAQ,UAAU,YAAY,CAAC,SAAS,QAAQ,iBAAiB;AACtE,gBAAc,SAAS,QAAQ,YAAY;AAC3C,SAAO;AACT,CAAC;AAGD,OAAO,QAAQ,YAAY,YAAY,CAAC,YAAY;AAClD,UAAQ,IAAI,mCAAmC,QAAQ,MAAM;AAG7D,QAAM,KAAA,EAAO,MAAM,CAAA,UAAS;AAC1B,YAAQ,MAAM,+BAA+B,KAAK;AAAA,EACpD,CAAC;AACH,CAAC;AAGD,KAAK,iBAAiB,WAAW,CAAC,UAA2B;AAC3D,UAAQ,IAAI,8BAA8B;AAE1C,QAAM,UAAU,KAAK,aAAa;AACpC,CAAC;AAED,KAAK,iBAAiB,YAAY,CAAC,UAA2B;AAC5D,UAAQ,IAAI,8BAA8B;AAE1C,QAAM;AAAA,IACJ,QAAQ,IAAI;AAAA,MACV,KAAK,QAAQ,MAAA;AAAA;AAAA,MAEb,OAAO,KAAA,EAAO,KAAK,CAAA,eAAc;AAC/B,eAAO,QAAQ;AAAA,UACb,WAAW,IAAI,CAAA,cAAa;AAC1B,gBAAI,cAAc,0BAA0B;AAC1C,sBAAQ,IAAI,uBAAuB,SAAS;AAC5C,qBAAO,OAAO,OAAO,SAAS;AAAA,YAChC;AAAA,UACF,CAAC;AAAA,QAAA;AAAA,MAEL,CAAC;AAAA,IAAA,CACF;AAAA,EAAA;AAEL,CAAC;AAGD,KAAK,iBAAiB,SAAS,CAAC,UAAsB;AACpD,UAAQ,MAAM,yBAAyB,MAAM,KAAK;AACpD,CAAC;AAED,KAAK,iBAAiB,sBAAsB,CAAC,UAAiC;AAC5E,UAAQ,MAAM,uCAAuC,MAAM,MAAM;AACnE,CAAC;AAED,QAAQ,IAAI,uBAAuB;"}