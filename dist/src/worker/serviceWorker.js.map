{"version":3,"file":"serviceWorker.js","sources":["../../../src/worker/serviceWorker.ts"],"sourcesContent":["/**\r\n * 稳定的优化Service Worker - 结合高级功能与稳定性\r\n * 基于 simpleServiceWorker.ts，添加缓存和重试功能，但避免复杂依赖\r\n */\r\n\r\nconsole.log('Stable Optimized Service Worker starting...');\r\n\r\n// ================================\r\n// 内置缓存系统 (避免外部依赖)\r\n// ================================\r\nclass SimpleCache {\r\n  private cache = new Map<string, { data: any; expireAt: number }>();\r\n  private readonly TTL = 3600000; // 1小时 (毫秒)\r\n\r\n  async get(key: string): Promise<any> {\r\n    const item = this.cache.get(key);\r\n    if (item && item.expireAt > Date.now()) {\r\n      return item.data;\r\n    }\r\n    if (item) {\r\n      this.cache.delete(key);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async set(key: string, data: any, ttl = this.TTL): Promise<void> {\r\n    this.cache.set(key, {\r\n      data,\r\n      expireAt: Date.now() + ttl\r\n    });\r\n  }\r\n\r\n  async clear(): Promise<void> {\r\n    this.cache.clear();\r\n  }\r\n\r\n  // 清理过期项\r\n  private cleanup(): void {\r\n    const now = Date.now();\r\n    for (const [key, item] of this.cache.entries()) {\r\n      if (item.expireAt <= now) {\r\n        this.cache.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 启动定时清理\r\n  startCleanup(): void {\r\n    setInterval(() => this.cleanup(), 300000); // 每5分钟清理一次\r\n  }\r\n}\r\n\r\n// ================================\r\n// 优化的翻译服务\r\n// ================================\r\nclass StableTranslationService {\r\n  private cache = new SimpleCache();\r\n  private pendingRequests = new Map<string, Promise<any>>();\r\n\r\n  constructor() {\r\n    this.cache.startCleanup();\r\n    console.log('Stable Translation Service initialized');\r\n  }\r\n\r\n  // 生成缓存键\r\n  private getCacheKey(text: string, source: string, target: string): string {\r\n    return `${text}|${source}|${target}`;\r\n  }\r\n\r\n  // 主翻译方法 - 带缓存和去重\r\n  async translate(text: string, source: string, target: string, useCache = true) {\r\n    try {\r\n      const cacheKey = this.getCacheKey(text, source, target);\r\n\r\n      // 检查缓存\r\n      if (useCache) {\r\n        const cached = await this.cache.get(cacheKey);\r\n        if (cached) {\r\n          console.log('Cache hit for translation');\r\n          return {\r\n            ok: true,\r\n            data: {\r\n              ...cached,\r\n              source: 'cache'\r\n            }\r\n          };\r\n        }\r\n      }\r\n\r\n      // 检查是否有相同的请求正在进行\r\n      if (this.pendingRequests.has(cacheKey)) {\r\n        console.log('Duplicate request detected, waiting for existing request');\r\n        return await this.pendingRequests.get(cacheKey);\r\n      }\r\n\r\n      // 创建新的翻译请求\r\n      const requestPromise = this.fetchTranslation(text, source, target);\r\n      this.pendingRequests.set(cacheKey, requestPromise);\r\n\r\n      try {\r\n        const result = await requestPromise;\r\n\r\n        // 缓存成功的结果\r\n        if (result.ok && useCache) {\r\n          await this.cache.set(cacheKey, result.data);\r\n        }\r\n\r\n        return result;\r\n      } finally {\r\n        // 清理pending请求\r\n        this.pendingRequests.delete(cacheKey);\r\n      }\r\n\r\n    } catch (error: any) {\r\n      console.error('Translation failed:', error);\r\n      return {\r\n        ok: false,\r\n        error: {\r\n          code: 'TRANSLATION_FAILED',\r\n          message: error.message\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  // 网络翻译请求 - 带重试机制\r\n  private async fetchTranslation(text: string, source: string, target: string, retries = 3): Promise<any> {\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10秒超时\r\n\r\n    try {\r\n      const response = await fetch('https://2648d4f4.r22.cpolar.top/translate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          target: target === 'zh' ? '中文' : 'English',\r\n          segments: [{\r\n            id: Date.now().toString(),\r\n            text: text,\r\n            model: 'qwen-turbo-latest'\r\n          }],\r\n          user_id: null,\r\n          extra_args: null\r\n        }),\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('Backend response:', result);\r\n\r\n      const segment = result.segments?.[0];\r\n\r\n      return {\r\n        ok: true,\r\n        data: {\r\n          translatedText: segment?.text || text,\r\n          detectedLanguage: source,\r\n          source: 'online',\r\n          timestamp: Date.now()\r\n        }\r\n      };\r\n    } catch (error: any) {\r\n      clearTimeout(timeoutId);\r\n\r\n      // 重试逻辑\r\n      if (retries > 0 && error.name !== 'AbortError') {\r\n        console.log(`Translation request failed, retrying... (${retries} attempts left)`, error.message);\r\n        const delay = Math.min(1000 * (4 - retries), 3000); // 1s, 2s, 3s延迟\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n        return this.fetchTranslation(text, source, target, retries - 1);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 记录单词\r\n  async recordWords(text: string, userId: number = 1) {\r\n    try {\r\n      const response = await fetch('https://2648d4f4.r22.cpolar.top/record-words', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          text: text,\r\n          user_id: userId\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      return {\r\n        ok: true,\r\n        data: result\r\n      };\r\n    } catch (error: any) {\r\n      console.error('Record words failed:', error);\r\n      return {\r\n        ok: false,\r\n        error: {\r\n          code: 'RECORD_WORDS_FAILED',\r\n          message: error.message\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  // 清理缓存\r\n  async clearCache() {\r\n    try {\r\n      await this.cache.clear();\r\n      return {\r\n        ok: true,\r\n        data: { message: 'Cache cleared successfully', timestamp: Date.now() }\r\n      };\r\n    } catch (error: any) {\r\n      console.error('Clear cache failed:', error);\r\n      return {\r\n        ok: false,\r\n        error: {\r\n          code: 'CLEAR_CACHE_FAILED',\r\n          message: error.message\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  // 获取统计信息\r\n  getStats() {\r\n    return {\r\n      cacheSize: this.cache['cache']?.size || 0,\r\n      pendingRequests: this.pendingRequests.size,\r\n      timestamp: Date.now()\r\n    };\r\n  }\r\n}\r\n\r\nconst stableTranslationService = new StableTranslationService();\r\n\r\n// ================================\r\n// 消息处理器 - 确保所有消息类型都有处理\r\n// ================================\r\nchrome.runtime.onMessage.addListener((message: any, _sender: any, sendResponse: any) => {\r\n  console.log('Service Worker received message:', message.type, 'Payload:', message.payload);\r\n\r\n  // 处理ping消息 - 用于检查扩展状态\r\n  if (message.type === 'ping') {\r\n    console.log('Ping received from content script');\r\n    sendResponse({ \r\n      ok: true, \r\n      data: { \r\n        status: 'ready',\r\n        version: 'stable-optimized',\r\n        timestamp: Date.now(),\r\n        stats: stableTranslationService.getStats()\r\n      } \r\n    });\r\n    return true;\r\n  }\r\n\r\n  if (message.type === 'translate') {\r\n    // 异步处理翻译请求\r\n    stableTranslationService.translate(\r\n      message.payload.text,\r\n      message.payload.source,\r\n      message.payload.target,\r\n      true // 使用缓存\r\n    ).then(result => {\r\n      console.log('Translation result:', result);\r\n      sendResponse(result);\r\n    }).catch(error => {\r\n      console.error('Translation handler error:', error);\r\n      sendResponse({\r\n        ok: false,\r\n        error: {\r\n          code: 'HANDLER_ERROR',\r\n          message: error.message\r\n        }\r\n      });\r\n    });\r\n\r\n    return true; // 保持消息通道开放\r\n  }\r\n\r\n  if (message.type === 'recordWords') {\r\n    stableTranslationService.recordWords(\r\n      message.payload.text,\r\n      message.payload.userId || 1\r\n    ).then(result => {\r\n      sendResponse(result);\r\n    }).catch(error => {\r\n      sendResponse({\r\n        ok: false,\r\n        error: {\r\n          code: 'HANDLER_ERROR',\r\n          message: error.message\r\n        }\r\n      });\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  if (message.type === 'clearCache') {\r\n    stableTranslationService.clearCache().then(result => {\r\n      sendResponse(result);\r\n    }).catch(error => {\r\n      sendResponse({\r\n        ok: false,\r\n        error: {\r\n          code: 'HANDLER_ERROR',\r\n          message: error.message\r\n        }\r\n      });\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  if (message.type === 'getStats') {\r\n    sendResponse({\r\n      ok: true,\r\n      data: stableTranslationService.getStats()\r\n    });\r\n    return false;\r\n  }\r\n\r\n  // 其他消息类型的同步处理\r\n  switch (message.type) {\r\n    case 'languages':\r\n      sendResponse({\r\n        ok: true,\r\n        data: {\r\n          languages: [\r\n            { code: 'auto', name: '自动检测' },\r\n            { code: 'en', name: 'English' },\r\n            { code: 'zh', name: '中文' },\r\n            { code: 'ja', name: '日本語' },\r\n            { code: 'ko', name: '한국어' },\r\n            { code: 'fr', name: 'Français' },\r\n            { code: 'de', name: 'Deutsch' },\r\n            { code: 'es', name: 'Español' }\r\n          ]\r\n        }\r\n      });\r\n      break;\r\n\r\n    case 'detect':\r\n      // 简单的语言检测 (可以扩展)\r\n      const text = message.payload?.text || '';\r\n      const isEnglish = /^[a-zA-Z\\s\\.,!?;:\"'-]+$/.test(text);\r\n      const isChinese = /[\\u4e00-\\u9fff]/.test(text);\r\n      \r\n      sendResponse({\r\n        ok: true,\r\n        data: {\r\n          detected: isChinese ? 'zh' : (isEnglish ? 'en' : 'auto'),\r\n          confidence: 0.8\r\n        }\r\n      });\r\n      break;\r\n\r\n    default:\r\n      console.warn('Unknown message type:', message.type);\r\n      sendResponse({\r\n        ok: false,\r\n        error: {\r\n          code: 'UNKNOWN_MESSAGE_TYPE',\r\n          message: `Unknown message type: ${message.type}`\r\n        }\r\n      });\r\n  }\r\n\r\n  return false;\r\n});\r\n\r\n// ================================\r\n// Chrome扩展生命周期事件\r\n// ================================\r\n\r\n// 安装事件\r\nchrome.runtime.onInstalled.addListener((details) => {\r\n  console.log('Stable Optimized Service Worker installed, reason:', details.reason);\r\n  \r\n  try {\r\n    // 创建右键菜单\r\n    chrome.contextMenus.removeAll(() => {\r\n      chrome.contextMenus.create({\r\n        id: 'translateSelection',\r\n        title: '翻译选中文本',\r\n        contexts: ['selection']\r\n      });\r\n      \r\n      chrome.contextMenus.create({\r\n        id: 'immersiveTranslate',\r\n        title: '沉浸式翻译',\r\n        contexts: ['page']\r\n      });\r\n\r\n      chrome.contextMenus.create({\r\n        id: 'clearCache',\r\n        title: '清理翻译缓存',\r\n        contexts: ['page']\r\n      });\r\n\r\n      chrome.contextMenus.create({\r\n        id: 'getStats',\r\n        title: '查看扩展统计',\r\n        contexts: ['page']\r\n      });\r\n      \r\n      console.log('Context menus created successfully');\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to create context menus:', error);\r\n  }\r\n});\r\n\r\n// 右键菜单点击事件\r\nchrome.contextMenus.onClicked.addListener((info, tab) => {\r\n  console.log('Context menu clicked:', info.menuItemId);\r\n  \r\n  if (!tab?.id) {\r\n    console.error('Tab ID is undefined');\r\n    return;\r\n  }\r\n  \r\n  switch (info.menuItemId) {\r\n    case 'translateSelection':\r\n      if (info.selectionText) {\r\n        chrome.tabs.sendMessage(tab.id, {\r\n          type: 'translateSelection',\r\n          text: info.selectionText\r\n        });\r\n      }\r\n      break;\r\n\r\n    case 'immersiveTranslate':\r\n      chrome.tabs.sendMessage(tab.id, {\r\n        type: 'toggleImmersiveTranslation'\r\n      });\r\n      break;\r\n\r\n    case 'clearCache':\r\n      stableTranslationService.clearCache().then(result => {\r\n        console.log('Cache cleared from context menu:', result);\r\n        // 可以发送通知给用户\r\n        if (tab.id) {\r\n          chrome.tabs.sendMessage(tab.id, {\r\n            type: 'showNotification',\r\n            message: result.ok ? '缓存已清理' : '清理失败'\r\n          });\r\n        }\r\n      });\r\n      break;\r\n\r\n    case 'getStats':\r\n      const stats = stableTranslationService.getStats();\r\n      console.log('Extension stats:', stats);\r\n      chrome.tabs.sendMessage(tab.id, {\r\n        type: 'showNotification',\r\n        message: `缓存: ${stats.cacheSize}条, 请求中: ${stats.pendingRequests}个`\r\n      });\r\n      break;\r\n  }\r\n});\r\n\r\n// 快捷键命令\r\nchrome.commands.onCommand.addListener((command, tab) => {\r\n  console.log('Command triggered:', command);\r\n  \r\n  if (command === 'toggle-immersive' && tab?.id) {\r\n    chrome.tabs.sendMessage(tab.id, {\r\n      type: 'toggleImmersiveTranslation'\r\n    });\r\n  }\r\n});\r\n\r\n// Service Worker 启动和生命周期 (使用正确的类型声明)\r\n(self as any).addEventListener('install', () => {\r\n  console.log('Service Worker installing...');\r\n  (self as any).skipWaiting();\r\n});\r\n\r\n(self as any).addEventListener('activate', (event: any) => {\r\n  console.log('Service Worker activating...');\r\n  event.waitUntil((self as any).clients.claim());\r\n});\r\n\r\n// 错误处理\r\n(self as any).addEventListener('error', (event: any) => {\r\n  console.error('Service Worker error:', event.error);\r\n});\r\n\r\n(self as any).addEventListener('unhandledrejection', (event: any) => {\r\n  console.error('Service Worker unhandled rejection:', event.reason);\r\n});\r\n\r\nconsole.log('Stable Optimized Service Worker loaded successfully');\r\n"],"names":[],"mappings":"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"}