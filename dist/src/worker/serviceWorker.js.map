{"version":3,"file":"serviceWorker.js","sources":["../../../src/worker/serviceWorker.ts"],"sourcesContent":["/**\r\n * Chrome Extension Service Worker (Manifest V3)\r\n * 处理翻译请求、缓存管理、配置存储等后台任务\r\n * \r\n * 调试方法：\r\n * 1. 打开 Chrome -> 扩展程序 -> Immersive Translate -> 详细信息\r\n * 2. 点击 \"检查视图\" 下的 \"Service Worker\" 链接\r\n * 3. 在 DevTools Console 中查看日志和调试\r\n */\r\n\r\n// 消息类型定义\r\ninterface TranslateRequest {\r\n  id: string;\r\n  text: string;\r\n  source: string;\r\n  target: string;\r\n  format?: 'text' | 'html';\r\n}\r\n\r\ninterface TranslateResponse {\r\n  ok: boolean;\r\n  data?: {\r\n    translatedText: string;\r\n    detectedLanguage?: string;\r\n    alternatives?: string[];\r\n  };\r\n  error?: {\r\n    code: string;\r\n    message: string;\r\n  };\r\n}\r\n\r\n// 后端API请求格式\r\ninterface BackendTranslateRequest {\r\n  target: string;\r\n  segments: Array<{\r\n    id: string;\r\n    text: string;\r\n    model?: string;\r\n  }>;\r\n  extra_args?: {\r\n    style?: string;\r\n    identity?: string;\r\n  };\r\n}\r\n\r\n// 后端API响应格式\r\ninterface BackendTranslateResponse {\r\n  translated: string;\r\n  segments: Array<{\r\n    id: string;\r\n    text: string;\r\n  }>;\r\n}\r\n\r\ninterface MessageRequest {\r\n  type: 'translate' | 'languages' | 'detect' | 'clearCache';\r\n  payload: any;\r\n}\r\n\r\ninterface MessageResponse {\r\n  ok: boolean;\r\n  data?: any;\r\n  error?: {\r\n    code: string;\r\n    message: string;\r\n  };\r\n}\r\n\r\n// 配置接口\r\ninterface ExtensionConfig {\r\n  reduceMotion: boolean;\r\n  immersiveModeEnabled: boolean;\r\n  autoClipboard: boolean;\r\n  cacheTTL: number;\r\n}\r\n\r\n// 默认配置\r\nconst DEFAULT_CONFIG: ExtensionConfig = {\r\n  reduceMotion: false,\r\n  immersiveModeEnabled: true,\r\n  autoClipboard: false,\r\n  cacheTTL: 3600 // 1小时\r\n};\r\n\r\n// IndexedDB 缓存助手\r\nclass TranslationCache {\r\n  private dbName = 'immersive-translate';\r\n  private version = 1;\r\n  private storeName = 'translations';\r\n  private db: IDBDatabase | null = null;\r\n\r\n  async init(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(this.dbName, this.version);\r\n      \r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = () => {\r\n        this.db = request.result;\r\n        resolve();\r\n      };\r\n      \r\n      request.onupgradeneeded = (event) => {\r\n        const db = (event.target as IDBOpenDBRequest).result;\r\n        if (!db.objectStoreNames.contains(this.storeName)) {\r\n          const store = db.createObjectStore(this.storeName, { keyPath: 'hash' });\r\n          store.createIndex('expireAt', 'expireAt', { unique: false });\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  async get(hash: string): Promise<any> {\r\n    if (!this.db) await this.init();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction([this.storeName], 'readonly');\r\n      const store = transaction.objectStore(this.storeName);\r\n      const request = store.get(hash);\r\n      \r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = () => {\r\n        const result = request.result;\r\n        if (result && result.expireAt > Date.now()) {\r\n          resolve(result.data);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  async set(hash: string, data: any, ttlSeconds: number = 3600): Promise<void> {\r\n    if (!this.db) await this.init();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction([this.storeName], 'readwrite');\r\n      const store = transaction.objectStore(this.storeName);\r\n      const expireAt = Date.now() + (ttlSeconds * 1000);\r\n      \r\n      const request = store.put({ hash, data, expireAt });\r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = () => resolve();\r\n    });\r\n  }\r\n\r\n  async clearExpired(): Promise<void> {\r\n    if (!this.db) await this.init();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db!.transaction([this.storeName], 'readwrite');\r\n      const store = transaction.objectStore(this.storeName);\r\n      const index = store.index('expireAt');\r\n      const range = IDBKeyRange.upperBound(Date.now());\r\n      \r\n      const request = index.openCursor(range);\r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = (event) => {\r\n        const cursor = (event.target as IDBRequest).result;\r\n        if (cursor) {\r\n          cursor.delete();\r\n          cursor.continue();\r\n        } else {\r\n          resolve();\r\n        }\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\n// 全局实例\r\nconst cache = new TranslationCache();\r\n\r\n// 生成缓存键\r\nasync function generateHash(text: string, source: string, target: string, format: string = 'text'): Promise<string> {\r\n  const data = `${text}|${source}|${target}|${format}`;\r\n  const encoder = new TextEncoder();\r\n  const hashBuffer = await crypto.subtle.digest('SHA-256', encoder.encode(data));\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\n// 翻译API请求（带重试）\r\nasync function fetchTranslation(request: TranslateRequest, retries: number = 2): Promise<TranslateResponse> {\r\n  const controller = new AbortController();\r\n  const timeoutId = setTimeout(() => controller.abort(), 8000); // 8秒超时\r\n\r\n  try {\r\n    // 构造后端API请求格式\r\n    const backendRequest: BackendTranslateRequest = {\r\n      target: request.target,\r\n      segments: [\r\n        {\r\n          id: request.id,\r\n          text: request.text,\r\n          // model 字段可选，这里暂不指定\r\n        }\r\n      ],\r\n      // extra_args 可以根据需要添加\r\n    };\r\n\r\n    const backendUrl = import.meta.env.BACKEND_URL || 'http://localhost:8000';\r\n    \r\n    const response = await fetch(`${backendUrl}/translate`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(backendRequest),\r\n      signal: controller.signal\r\n    });\r\n\r\n    clearTimeout(timeoutId);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    // 处理后端响应格式\r\n    const backendResponse: BackendTranslateResponse = await response.json();\r\n    \r\n    // 转换为前端期望的格式\r\n    const translatedSegment = backendResponse.segments.find(segment => segment.id === request.id);\r\n    \r\n    if (!translatedSegment) {\r\n      throw new Error('无法找到对应的翻译结果');\r\n    }\r\n\r\n    return {\r\n      ok: true,\r\n      data: {\r\n        translatedText: translatedSegment.text,\r\n        detectedLanguage: backendResponse.translated,\r\n        alternatives: []\r\n      }\r\n    };\r\n\r\n  } catch (error: any) {\r\n    clearTimeout(timeoutId);\r\n    \r\n    if (retries > 0 && error.name !== 'AbortError') {\r\n      console.log(`Translation request failed, retrying... (${retries} attempts left)`);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 等待1秒后重试\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 等待1秒后重试\r\n      return fetchTranslation(request, retries - 1);\r\n    }\r\n\r\n    return {\r\n      ok: false,\r\n      error: {\r\n        code: error.name === 'AbortError' ? 'TIMEOUT' : 'NETWORK_ERROR',\r\n        message: error.message || 'Translation request failed'\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// 处理翻译请求\r\nasync function handleTranslateRequest(request: TranslateRequest): Promise<TranslateResponse> {\r\n  try {\r\n    // 生成缓存键\r\n    const hash = await generateHash(request.text, request.source, request.target, request.format);\r\n    \r\n    // 检查缓存\r\n    const cached = await cache.get(hash);\r\n    if (cached) {\r\n      console.log('Translation cache hit:', hash);\r\n      return { ok: true, data: cached };\r\n    }\r\n\r\n    // 发起翻译请求\r\n    console.log('Translation cache miss, fetching from API:', hash);\r\n    const result = await fetchTranslation(request);\r\n    \r\n    // 缓存成功的结果\r\n    if (result.ok && result.data) {\r\n      const config = await getConfig();\r\n      await cache.set(hash, result.data, config.cacheTTL);\r\n    }\r\n\r\n    return result;\r\n\r\n  } catch (error: any) {\r\n    console.error('Translation handler error:', error);\r\n    return {\r\n      ok: false,\r\n      error: {\r\n        code: 'HANDLER_ERROR',\r\n        message: error.message || 'Internal translation error'\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// 获取配置\r\nasync function getConfig(): Promise<ExtensionConfig> {\r\n  return new Promise((resolve) => {\r\n    chrome.storage.local.get(DEFAULT_CONFIG, (result) => {\r\n      resolve(result as ExtensionConfig);\r\n    });\r\n  });\r\n}\r\n\r\n// 保存配置\r\n\r\n// 消息处理器\r\nasync function handleMessage(\r\n  message: MessageRequest,\r\n  sender: chrome.runtime.MessageSender,\r\n  sendResponse: (response: MessageResponse) => void\r\n): Promise<void> {\r\n  console.log('Service worker received message:', message.type, sender.tab?.id);\r\n\r\n  try {\r\n    switch (message.type) {\r\n      case 'translate':\r\n        const translateResult = await handleTranslateRequest(message.payload);\r\n        sendResponse(translateResult);\r\n        break;\r\n\r\n      case 'languages':\r\n        // 返回支持的语言列表（模拟数据）\r\n        sendResponse({\r\n          ok: true,\r\n          data: {\r\n            languages: [\r\n              { code: 'en', name: 'English' },\r\n              { code: 'zh', name: '中文' },\r\n              { code: 'ja', name: '日本語' },\r\n              { code: 'ko', name: '한국어' },\r\n              { code: 'fr', name: 'Français' },\r\n              { code: 'de', name: 'Deutsch' },\r\n              { code: 'es', name: 'Español' }\r\n            ]\r\n          }\r\n        });\r\n        break;\r\n\r\n      case 'detect':\r\n        // 语言检测（模拟数据）\r\n        sendResponse({\r\n          ok: true,\r\n          data: {\r\n            detected: 'en'\r\n          }\r\n        });\r\n        break;\r\n\r\n      case 'clearCache':\r\n        await cache.clearExpired();\r\n        sendResponse({\r\n          ok: true,\r\n          data: { message: 'Cache cleared' }\r\n        });\r\n        break;\r\n\r\n      default:\r\n        sendResponse({\r\n          ok: false,\r\n          error: {\r\n            code: 'UNKNOWN_MESSAGE_TYPE',\r\n            message: `Unknown message type: ${message.type}`\r\n          }\r\n        });\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Message handler error:', error);\r\n    sendResponse({\r\n      ok: false,\r\n      error: {\r\n        code: 'MESSAGE_HANDLER_ERROR',\r\n        message: error.message || 'Internal message handler error'\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// 事件监听器\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  handleMessage(message, sender, sendResponse);\r\n  return true; // 保持消息通道开放以支持异步响应\r\n});\r\n\r\n// 安装和更新事件\r\nchrome.runtime.onInstalled.addListener((details) => {\r\n  console.log('Extension installed or updated:', details.reason);\r\n  \r\n  // 初始化缓存\r\n  cache.init().catch(error => {\r\n    console.error('Failed to initialize cache:', error);\r\n  });\r\n});\r\n\r\nconsole.log('Service Worker loaded');"],"names":[],"mappings":"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"}