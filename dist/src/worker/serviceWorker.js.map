{"version":3,"file":"serviceWorker.js","sources":["../../../src/worker/simpleServiceWorker.ts"],"sourcesContent":["/**\r\n * 简化的Service Worker用于测试\r\n */\r\n\r\nconsole.log('Service Worker starting...');\r\n\r\n// 基本的翻译服务\r\nclass SimpleTranslationService {\r\n  async translate(text: string, source: string, target: string) {\r\n    // 使用真正后端的API格式\r\n    try {\r\n      const response = await fetch('http://localhost:8000/translate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          segments: [{\r\n            id: Date.now().toString(),\r\n            text: text\r\n          }],\r\n          target_language: target === 'zh' ? '中文' : '英文',\r\n          model_name: 'qwen-turbo-latest',\r\n          identity: '通用专家',\r\n          extra_instructions: '请提供准确的翻译'\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      const segment = result.translated_segments?.[0];\r\n\r\n      return {\r\n        ok: true,\r\n        data: {\r\n          translatedText: segment?.text || text,\r\n          detectedLanguage: source,\r\n          source: 'online'\r\n        }\r\n      };\r\n    } catch (error: any) {\r\n      console.error('Translation failed:', error);\r\n      return {\r\n        ok: false,\r\n        error: {\r\n          code: 'TRANSLATION_FAILED',\r\n          message: error.message\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  async recordWords(text: string, userId: number = 1) {\r\n    try {\r\n      const response = await fetch('http://localhost:8000/record-words', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          text: text,\r\n          user_id: userId\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      return {\r\n        ok: true,\r\n        data: result\r\n      };\r\n    } catch (error: any) {\r\n      console.error('Record words failed:', error);\r\n      return {\r\n        ok: false,\r\n        error: {\r\n          code: 'RECORD_WORDS_FAILED',\r\n          message: error.message\r\n        }\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nconst simpleTranslationService = new SimpleTranslationService();\r\n\r\n// 消息处理器\r\nchrome.runtime.onMessage.addListener((message: any, _sender: any, sendResponse: any) => {\r\n  console.log('Service Worker received message:', message.type);\r\n\r\n  // 处理ping消息 - 用于检查扩展状态\r\n  if (message.type === 'ping') {\r\n    console.log('Ping received from content script');\r\n    sendResponse({ \r\n      ok: true, \r\n      data: { \r\n        status: 'ready', \r\n        timestamp: Date.now() \r\n      } \r\n    });\r\n    return true;\r\n  }\r\n\r\n  if (message.type === 'translate') {\r\n    // 异步处理翻译请求\r\n    simpleTranslationService.translate(\r\n      message.payload.text,\r\n      message.payload.source,\r\n      message.payload.target\r\n    ).then(result => {\r\n      sendResponse(result);\r\n    }).catch(error => {\r\n      sendResponse({\r\n        ok: false,\r\n        error: {\r\n          code: 'HANDLER_ERROR',\r\n          message: error.message\r\n        }\r\n      });\r\n    });\r\n\r\n    // 保持消息通道开放\r\n    return true;\r\n  }\r\n\r\n  if (message.type === 'recordWords') {\r\n    // 异步处理记录单词请求\r\n    simpleTranslationService.recordWords(\r\n      message.payload.text,\r\n      message.payload.userId || 1\r\n    ).then(result => {\r\n      sendResponse(result);\r\n    }).catch(error => {\r\n      sendResponse({\r\n        ok: false,\r\n        error: {\r\n          code: 'HANDLER_ERROR',\r\n          message: error.message\r\n        }\r\n      });\r\n    });\r\n\r\n    // 保持消息通道开放\r\n    return true;\r\n  }\r\n\r\n  // 其他消息类型\r\n  switch (message.type) {\r\n    case 'languages':\r\n      sendResponse({\r\n        ok: true,\r\n        data: {\r\n          languages: [\r\n            { code: 'auto', name: '自动检测' },\r\n            { code: 'en', name: 'English' },\r\n            { code: 'zh', name: '中文' },\r\n            { code: 'ja', name: '日本語' },\r\n            { code: 'ko', name: '한국어' },\r\n            { code: 'fr', name: 'Français' },\r\n            { code: 'de', name: 'Deutsch' },\r\n            { code: 'es', name: 'Español' }\r\n          ]\r\n        }\r\n      });\r\n      break;\r\n\r\n    default:\r\n      sendResponse({\r\n        ok: false,\r\n        error: {\r\n          code: 'UNKNOWN_MESSAGE_TYPE',\r\n          message: `Unknown message type: ${message.type}`\r\n        }\r\n      });\r\n  }\r\n});\r\n\r\n// 安装事件\r\nchrome.runtime.onInstalled.addListener(() => {\r\n  console.log('Service Worker installed');\r\n  \r\n  // 创建右键菜单\r\n  try {\r\n    chrome.contextMenus.create({\r\n      id: 'translateSelection',\r\n      title: '翻译选中文本',\r\n      contexts: ['selection']\r\n    });\r\n    \r\n    chrome.contextMenus.create({\r\n      id: 'immersiveTranslate',\r\n      title: '沉浸式翻译',\r\n      contexts: ['page']\r\n    });\r\n    \r\n    console.log('Context menus created');\r\n  } catch (error) {\r\n    console.error('Failed to create context menus:', error);\r\n  }\r\n});\r\n\r\n// 右键菜单点击事件\r\nchrome.contextMenus.onClicked.addListener((info, tab) => {\r\n  console.log('Context menu clicked:', info.menuItemId);\r\n  \r\n  if (!tab?.id) {\r\n    console.error('Tab ID is undefined');\r\n    return;\r\n  }\r\n  \r\n  if (info.menuItemId === 'translateSelection' && info.selectionText) {\r\n    chrome.tabs.sendMessage(tab.id, {\r\n      type: 'translateSelection',\r\n      text: info.selectionText\r\n    });\r\n  } else if (info.menuItemId === 'immersiveTranslate') {\r\n    chrome.tabs.sendMessage(tab.id, {\r\n      type: 'toggleImmersiveTranslation'\r\n    });\r\n  }\r\n});\r\n\r\n// 快捷键命令\r\nchrome.commands.onCommand.addListener((command, tab) => {\r\n  console.log('Command triggered:', command);\r\n  \r\n  if (command === 'toggle-immersive' && tab?.id) {\r\n    chrome.tabs.sendMessage(tab.id, {\r\n      type: 'toggleImmersiveTranslation'\r\n    });\r\n  }\r\n});\r\n\r\nconsole.log('Simple Service Worker loaded successfully');\r\n"],"names":[],"mappings":"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"}